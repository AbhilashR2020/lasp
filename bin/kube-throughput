#!/usr/bin/env bash

LASP_BRANCH=workflow-v2
IMAGE=lasp-dev
REPS=1
GCE=true

# Rebuild image if desired.
if [ ! -z "$REBUILD_IMAGE" ]; then
    # Delete image
    IMAGE_IDS=$(docker images | grep cmeiklejohn/${IMAGE} | awk '{print $3}')
    echo "Images matching for deletion: ${IMAGE_IDS}"

    if [ ! -z "$IMAGE_IDS" ]; then
      docker rmi ${IMAGE_IDS}
    fi

    # Rebuild image fresh, to ensure no stale dependencies
    docker build -f Dockerfiles/$IMAGE -t cmeiklejohn/${IMAGE} .

    # Push image to hub
    docker push cmeiklejohn/${IMAGE}
fi

# Perform cluster operations if necessary.
if [ ! -z "$CLUSTER_OPS" ]; then
  # Bootstrap cluster
  gcloud beta container clusters create lasp \
    --machine-type=n1-standard-16 \
    --num-nodes=${NODES}

  # Get container credential
  gcloud beta container clusters get-credentials lasp
fi

# Deploy a single redis instance.
echo "Copying code to /tmp"
cp bin/sync-redis.erl /tmp
cp bin/kube /tmp
mkdir -p /tmp/_build/default/lib/eredis/ebin
cp -Rp _build/default/lib/eredis/ebin/ /tmp/_build/default/lib/eredis/ebin

cd /tmp

cat <<EOF > redis.yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: redis
    labels:
      run: redis
  spec:
    type: LoadBalancer
    ports:
    - port: 6379
      protocol: TCP
      name: tcp
    selector:
      run: redis
---
  apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    name: redis
  spec:
    replicas: 1
    template:
      metadata:
        labels:
          run: redis
      spec:
        containers:
        - name: redis
          image: redis
EOF

echo "Creating redis deployment."
kubectl create -f /tmp/redis.yaml
echo

# Run test X times using the right image for the structure
for i in `seq 1 ${REPS}`;
  do
    LASP_BRANCH=${LASP_BRANCH} IMAGE=${IMAGE} GCE=${GCE} THROUGHPUT_TYPE=gset CLIENT_NUMBER=1 ./kube
  done

# Download data from Redis.
if [ "$GCE" ]; then
  echo "Running in Google Container Engine."
  export REDIS_SERVICE_HOST=$(kubectl get services | grep redis | awk '{print $3}' | head -1)
  # export REDIS_SERVICE_HOST=$(gcloud compute forwarding-rules list | grep TCP | awk '{print $3}' | tail -1)
  export REDIS_SERVICE_PORT=6379
  echo "REDIS_SERVICE_HOST: ${REDIS_SERVICE_HOST}"
  echo "REDIS_SERVICE_PORT: ${REDIS_SERVICE_PORT}"
else
  export REDIS_SERVICE_HOST=$(kubectl config view | grep server | cut -f 2- -d ":" | tr -d " " | head -1 | cut -f 2-2 -d ":" | sed -e 's/\/\///g')
  export REDIS_SERVICE_PORT=$(kubectl get service redis -o jsonpath="{.spec.ports[*].nodePort}")
fi

echo "Downloading data from Redis."
./sync-redis.erl
mkdir -p ~/Documents/lasp/priv/evaluation/logs
cp -Rp /tmp/logs/* ~/Documents/lasp/priv/evaluation/logs

echo "Deleting redis deployments and servies."
kubectl delete -f /tmp/redis.yaml
echo

# Perform cluster operations if necessary.
if [ ! -z "$CLUSTER_OPS" ]; then
  # Terminate the cluster
  yes | gcloud beta container clusters delete lasp
fi
