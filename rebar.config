{deps, [
    {lager, ".*", {git, "git://github.com/basho/lager", {tag, "2.1.1"}}},
    {lasp_support, ".*", {git, "git://github.com/lasp-lang/lasp_support", {branch, "master"}}},
    {plumtree, ".*", {git, "git://github.com/lasp-lang/plumtree", {branch, "master"}}},
    {riak_dt, ".*", {git, "git://github.com/lasp-lang/riak_dt", {tag, "develop"}}},
    {druuid, "0.0.1", {git, "git://github.com/kellymclaughlin/druuid", {tag, "0.2"}}},
    {sext, ".*", {git, "git://github.com/uwiger/sext.git", {branch, "master"}}},
    {eleveldb, ".*", {git, "git://github.com/lasp-lang/eleveldb.git", {branch, "develop"}}},
    {cuttlefish, ".*", {git, "git://github.com/basho/cuttlefish.git", {branch, "develop"}}},
    {time_compat, ".*", {git, "git://github.com/lasp-lang/time_compat.git", {branch, "master"}}},
    {gb_trees_ext, ".*", {git, "git://github.com/lasp-lang/gb_trees_ext.git", {branch, "master"}}},
    {gen_flow, ".*", {git, "git://github.com/lasp-lang/gen_flow.git", {branch, "master"}}}
]}.

{plugin_dir, ".rebar_plugins"}.
{plugins, [rebar_test_plugin, rebar_lock_deps_plugin]}.
{riak_test, [
  {test_paths, ["riak_test"]},
  {test_output, "riak_test/ebin"}
]}.

{erl_opts, [debug_info,
            warnings_as_errors,
            {platform_define, "^[0-9]+", namespaced_types},
            {parse_transform, lager_transform}]}.
{cover_enabled, false}.
{eunit_opts, [verbose, {report,{eunit_surefire,[{dir,"."}]}}]}.
{edoc_opts, [{preprocess, true}]}.

{xref_checks, []}.
{xref_queries, [{"(XC - UC) || (XU - X - B - \"(dtrace)\" : Mod)", []}]}.

{profiles, [
    {docs, [
        {deps, [{edown, ".*", {git, "git://github.com/uwiger/edown.git", {branch, "master"}}}]}
    ]},
    {test, [
        {deps, [{riak_test, ".*", {git, "git://github.com/lasp-lang/riak_test", {branch, "master"}}}]}
    ]},
    {package, [
        {node_package, ".*", {git, "git://github.com/basho/node_package.git", {branch, "develop"}}}
    ]}
]}.

{overrides,
  [{override, sext, [{{deps,default}, []}]},

   {override, druuid,
    [{artifacts, ["priv/druuid.so"]},
     {pre_hooks, [{compile, "c_src/build_deps.sh get-deps"},
                  {compile, "c_src/build_deps.sh"}]},

     {post_hooks, [{clean, "c_src/build_deps.sh clean"}]},

     {plugins, [pc]},

     {provider_hooks, [{post, [{compile, {pc, compile}},
                               {clean, {pc, clean}}]
                       }]}
    ]},

   {override, eleveldb,
    [{{deps,default}, []},

     {artifacts, ["priv/eleveldb.so"]},
     {pre_hooks, [{compile, "c_src/build_deps.sh get-deps"},
                  {compile, "c_src/build_deps.sh"}]},

     {post_hooks, [{clean, "c_src/build_deps.sh clean"}]},

     {plugins, [pc]},

     {provider_hooks, [
                      {post, [
                             {compile, {pc, compile}},
                             {clean, {pc, clean}}
                             ]
                      }]
     }
    ]}
]}.
